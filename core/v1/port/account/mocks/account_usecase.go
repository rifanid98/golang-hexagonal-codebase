// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	core "codebase/core"
	entity "codebase/core/v1/entity"

	mock "github.com/stretchr/testify/mock"
)

// AccountUsecase is an autogenerated mock type for the AccountUsecase type
type AccountUsecase struct {
	mock.Mock
}

// AccountAction provides a mock function with given fields: ic, accountId, targetId, action
func (_m *AccountUsecase) AccountAction(ic *core.InternalContext, accountId string, targetId string, action int) *core.CustomError {
	ret := _m.Called(ic, accountId, targetId, action)

	var r0 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string, string, int) *core.CustomError); ok {
		r0 = rf(ic, accountId, targetId, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CustomError)
		}
	}

	return r0
}

// AccountActivate provides a mock function with given fields: ic, accountId
func (_m *AccountUsecase) AccountActivate(ic *core.InternalContext, accountId string) (map[string]interface{}, *core.CustomError) {
	ret := _m.Called(ic, accountId)

	var r0 map[string]interface{}
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) (map[string]interface{}, *core.CustomError)); ok {
		return rf(ic, accountId)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) map[string]interface{}); ok {
		r0 = rf(ic, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, string) *core.CustomError); ok {
		r1 = rf(ic, accountId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// AccountActivationCheck provides a mock function with given fields: ic
func (_m *AccountUsecase) AccountActivationCheck(ic *core.InternalContext) *core.CustomError {
	ret := _m.Called(ic)

	var r0 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext) *core.CustomError); ok {
		r0 = rf(ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CustomError)
		}
	}

	return r0
}

// AccountGet provides a mock function with given fields: ic, accountId
func (_m *AccountUsecase) AccountGet(ic *core.InternalContext, accountId string) (*entity.Account, *core.CustomError) {
	ret := _m.Called(ic, accountId)

	var r0 *entity.Account
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) (*entity.Account, *core.CustomError)); ok {
		return rf(ic, accountId)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) *entity.Account); ok {
		r0 = rf(ic, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, string) *core.CustomError); ok {
		r1 = rf(ic, accountId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// AccountList provides a mock function with given fields: ic, accountId, meta
func (_m *AccountUsecase) AccountList(ic *core.InternalContext, accountId string, meta map[string]interface{}) ([]entity.Account, int32, *core.CustomError) {
	ret := _m.Called(ic, accountId, meta)

	var r0 []entity.Account
	var r1 int32
	var r2 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string, map[string]interface{}) ([]entity.Account, int32, *core.CustomError)); ok {
		return rf(ic, accountId, meta)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string, map[string]interface{}) []entity.Account); ok {
		r0 = rf(ic, accountId, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, string, map[string]interface{}) int32); ok {
		r1 = rf(ic, accountId, meta)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(*core.InternalContext, string, map[string]interface{}) *core.CustomError); ok {
		r2 = rf(ic, accountId, meta)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*core.CustomError)
		}
	}

	return r0, r1, r2
}

// NewAccountUsecase creates a new instance of AccountUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountUsecase {
	mock := &AccountUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
