// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	core "codebase/core"
	entity "codebase/core/v1/entity"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// FindAccountByEmail provides a mock function with given fields: ic, email
func (_m *AccountRepository) FindAccountByEmail(ic *core.InternalContext, email string) (*entity.Account, *core.CustomError) {
	ret := _m.Called(ic, email)

	var r0 *entity.Account
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) (*entity.Account, *core.CustomError)); ok {
		return rf(ic, email)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) *entity.Account); ok {
		r0 = rf(ic, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, string) *core.CustomError); ok {
		r1 = rf(ic, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// FindAccountById provides a mock function with given fields: ic, accountId
func (_m *AccountRepository) FindAccountById(ic *core.InternalContext, accountId string) (*entity.Account, *core.CustomError) {
	ret := _m.Called(ic, accountId)

	var r0 *entity.Account
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) (*entity.Account, *core.CustomError)); ok {
		return rf(ic, accountId)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) *entity.Account); ok {
		r0 = rf(ic, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, string) *core.CustomError); ok {
		r1 = rf(ic, accountId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// FindAccountByUsername provides a mock function with given fields: ic, username
func (_m *AccountRepository) FindAccountByUsername(ic *core.InternalContext, username string) (*entity.Account, *core.CustomError) {
	ret := _m.Called(ic, username)

	var r0 *entity.Account
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) (*entity.Account, *core.CustomError)); ok {
		return rf(ic, username)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) *entity.Account); ok {
		r0 = rf(ic, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, string) *core.CustomError); ok {
		r1 = rf(ic, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// FindAccountsActivation provides a mock function with given fields: ic
func (_m *AccountRepository) FindAccountsActivation(ic *core.InternalContext) ([]entity.Account, *core.CustomError) {
	ret := _m.Called(ic)

	var r0 []entity.Account
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext) ([]entity.Account, *core.CustomError)); ok {
		return rf(ic)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext) []entity.Account); ok {
		r0 = rf(ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext) *core.CustomError); ok {
		r1 = rf(ic)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// GetAccountsExclude provides a mock function with given fields: ic, profileIds, meta
func (_m *AccountRepository) GetAccountsExclude(ic *core.InternalContext, profileIds []string, meta map[string]interface{}) ([]entity.Account, int32, *core.CustomError) {
	ret := _m.Called(ic, profileIds, meta)

	var r0 []entity.Account
	var r1 int32
	var r2 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, []string, map[string]interface{}) ([]entity.Account, int32, *core.CustomError)); ok {
		return rf(ic, profileIds, meta)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, []string, map[string]interface{}) []entity.Account); ok {
		r0 = rf(ic, profileIds, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, []string, map[string]interface{}) int32); ok {
		r1 = rf(ic, profileIds, meta)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(*core.InternalContext, []string, map[string]interface{}) *core.CustomError); ok {
		r2 = rf(ic, profileIds, meta)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*core.CustomError)
		}
	}

	return r0, r1, r2
}

// InsertAccount provides a mock function with given fields: ic, _a1
func (_m *AccountRepository) InsertAccount(ic *core.InternalContext, _a1 *entity.Account) (*entity.Account, *core.CustomError) {
	ret := _m.Called(ic, _a1)

	var r0 *entity.Account
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Account) (*entity.Account, *core.CustomError)); ok {
		return rf(ic, _a1)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Account) *entity.Account); ok {
		r0 = rf(ic, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, *entity.Account) *core.CustomError); ok {
		r1 = rf(ic, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: ic, _a1
func (_m *AccountRepository) UpdateAccount(ic *core.InternalContext, _a1 *entity.Account) (*entity.Account, *core.CustomError) {
	ret := _m.Called(ic, _a1)

	var r0 *entity.Account
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Account) (*entity.Account, *core.CustomError)); ok {
		return rf(ic, _a1)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Account) *entity.Account); ok {
		r0 = rf(ic, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, *entity.Account) *core.CustomError); ok {
		r1 = rf(ic, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
