// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	core "codebase/core"
	common "codebase/core/v1/port/common"

	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// AbortTransaction provides a mock function with given fields: ic
func (_m *Transaction) AbortTransaction(ic *core.InternalContext) *core.CustomError {
	ret := _m.Called(ic)

	var r0 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext) *core.CustomError); ok {
		r0 = rf(ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CustomError)
		}
	}

	return r0
}

// CommitTransaction provides a mock function with given fields: ic
func (_m *Transaction) CommitTransaction(ic *core.InternalContext) *core.CustomError {
	ret := _m.Called(ic)

	var r0 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext) *core.CustomError); ok {
		r0 = rf(ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CustomError)
		}
	}

	return r0
}

// StartTransaction provides a mock function with given fields: ic
func (_m *Transaction) StartTransaction(ic *core.InternalContext) (common.Transaction, *core.InternalContext, *core.CustomError) {
	ret := _m.Called(ic)

	var r0 common.Transaction
	var r1 *core.InternalContext
	var r2 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext) (common.Transaction, *core.InternalContext, *core.CustomError)); ok {
		return rf(ic)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext) common.Transaction); ok {
		r0 = rf(ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext) *core.InternalContext); ok {
		r1 = rf(ic)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.InternalContext)
		}
	}

	if rf, ok := ret.Get(2).(func(*core.InternalContext) *core.CustomError); ok {
		r2 = rf(ic)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*core.CustomError)
		}
	}

	return r0, r1, r2
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
