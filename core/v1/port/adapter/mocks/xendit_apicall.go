// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	core "codebase/core"

	mock "github.com/stretchr/testify/mock"
)

// XenditApiCall is an autogenerated mock type for the XenditApiCall type
type XenditApiCall struct {
	mock.Mock
}

// QRCreate provides a mock function with given fields: ic, data
func (_m *XenditApiCall) QRCreate(ic *core.InternalContext, data map[string]interface{}) (map[string]interface{}, *core.CustomError) {
	ret := _m.Called(ic, data)

	var r0 map[string]interface{}
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, map[string]interface{}) (map[string]interface{}, *core.CustomError)); ok {
		return rf(ic, data)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ic, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, map[string]interface{}) *core.CustomError); ok {
		r1 = rf(ic, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// QrCheck provides a mock function with given fields: ic, data
func (_m *XenditApiCall) QRCheck(ic *core.InternalContext, data map[string]interface{}) (map[string]interface{}, *core.CustomError) {
	ret := _m.Called(ic, data)

	var r0 map[string]interface{}
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, map[string]interface{}) (map[string]interface{}, *core.CustomError)); ok {
		return rf(ic, data)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ic, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, map[string]interface{}) *core.CustomError); ok {
		r1 = rf(ic, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// NewXenditApiCall creates a new instance of XenditApiCall. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXenditApiCall(t interface {
	mock.TestingT
	Cleanup(func())
}) *XenditApiCall {
	mock := &XenditApiCall{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
